env:
  global:
    - COMMIT_AUTHOR_EMAIL: orex@travis-ci.org
    - TEST_PROGRAM_CMD="-d -i ../data/examples/Ca2Al2SiO7/Ca2Al2SiO7.cif | grep -q "The total number of combinations is 6"

group: travis_latest

os: linux
dist: bionic
language: cpp
cache: ccache

jobs:
 include:
   - name: "Developing build."
     env: BUILD_TYPE=PROGRAM
          CMAKE_COMMAND='cmake'
          DEPLOY_BUILD=FALSE

   - name: "Developing build for focal (20.04)"
     dist: focal
     env: BUILD_TYPE=PROGRAM
          CMAKE_COMMAND='cmake'
          DEPLOY_BUILD=FALSE

   - name: "Developing build for old xenial platform."
     dist: xenial
     env: BUILD_TYPE=PROGRAM
          CMAKE_COMMAND='cmake'
          DEPLOY_BUILD=FALSE

   - name: "Developing build without LibArchive support."
     env: BUILD_TYPE=PROGRAM
          CMAKE_COMMAND='cmake'
          DEPLOY_BUILD=FALSE
          SUPERCELL_CMAKE_OPTIONS="-DCMAKE_DISABLE_FIND_PACKAGE_LibArchive=TRUE"

   - name: "Developing build with clang."
     compiler: clang
     cache: false
     env: BUILD_TYPE=PROGRAM
          CMAKE_COMMAND='cmake'
          DEPLOY_BUILD=FALSE

   - name: "Deploy build Linux."
     compiler: gcc
     env: BUILD_TYPE=PROGRAM
          CMAKE_COMMAND='cmake'
          LIBARCHIVE_OFF=FALSE
          DEPLOY_BUILD="linux"
          SUPERCELL_CMAKE_OPTIONS="-DLINK_STATIC_LIBS=ON"

   - name: "Deploy build MacOS."
     os: osx
     osx_image: xcode12
     env: BUILD_TYPE=PROGRAM
          CMAKE_COMMAND='cmake'
          DEPLOY_BUILD="osx"
          SUPERCELL_CMAKE_OPTIONS="-DLINK_STATIC_LIBS=ON -DLibArchive_INCLUDE_DIR=/usr/local/opt/libarchive/include"

   - name: "Deploy build Windows crosscompile."
     cache:
       timeout: 2000
       directories:
         - $HOME/.cache_mxe
         
     env: MXE_URL="https://github.com/mxe/mxe.git"
          CROSS_TARGET='x86_64-w64-mingw32.static'
          CMAKE_COMMAND="${CROSS_TARGET}-cmake"
          BUILD_TYPE=CROSS
          DEPLOY_BUILD="windows"
          SUPERCELL_CMAKE_OPTIONS="-DLINK_STATIC_LIBS=ON"
     addons:
       apt:
         update: true
         packages:
           - wine-stable
           - autopoint
           - gperf
           - intltool
           - libtool
           - libtool-bin
           - lzip
           - p7zip-full
           
   - name: "Deploy build documentation."
     dist: focal
     env: BUILD_TYPE=DOC
          CMAKE_COMMAND='cmake'
          DEPLOY_BUILD="doc"
     cache: false
     addons:
       apt:
         update: true
         packages:
         - lmodern
         - texlive-extra-utils
         - python3-pygments
         - texlive-extra-utils
         - texlive-latex-extra
         - texlive-science
         - texlive-humanities
         - texlive-pstricks
         - texlive-fonts-recommended
         - texlive-pictures

addons:
  apt:
    update: true
    packages:
    - libarchive-dev
    - libboost-program-options-dev
    - libboost-regex-dev
    - libboost-filesystem-dev
    - libboost-random-dev
    - libboost-system-dev
    - libtbb-dev
    - libeigen3-dev
    - liblzma-dev
    - libbz2-dev
    - zlib1g-dev
    - zip

  homebrew:
    update: false
    packages:
    - boost
    - eigen
    - libarchive
    - zlib
    - libxml2


before_install:
 - export c_path=${PWD}
 - |
   if [[ ${DEPLOY_BUILD} == "linux" ]]; then
     sudo apt-get -y purge libarchive-dev libtbb-dev
     wget -nv https://github.com/libarchive/libarchive/releases/download/3.5.1/libarchive-3.5.1.tar.gz
     tar -xf libarchive-3.5.1.tar.gz
     cd libarchive-3.5.1
     ./configure --without-openssl --without-libb2 --without-xml2 --without-expat --disable-bsdtar
     sed -ir '/^.*#define HAVE_LZMA_STREAM_ENCODER_MT 1.*$/d' config.h
     make -j 4
     sudo make install
   fi
 - |
   if [[ ${TRAVIS_OS_NAME} == "osx" || ${DEPLOY_BUILD} == "linux" ]]; then
     # Install tbb from github to link statically
     git clone --depth 1 https://github.com/wjakob/tbb.git
     cd tbb && mkdir cmake-build && cd cmake-build
     cmake ../ -DCMAKE_BUILD_TYPE=Release -DTBB_BUILD_TBBMALLOC=OFF -DTBB_BUILD_TBBMALLOC_PROXY=OFF -DTBB_BUILD_TESTS=OFF
     make -j 4
     sudo make install
   fi


install:
 - export START_TIME=`date +%s`
 - mkdir -p tmp && cd tmp
 - |
   if [[ ${BUILD_TYPE} == CROSS ]]; then
     pushd .
     git clone --depth 1 ${MXE_URL} && cd mxe
     ln -s $HOME/.cache_mxe .ccache
     while(true); do sleep 9m; echo "watchdog signal"; done &
     WATCHDOG_PID=$!
     make MXE_TARGETS=${CROSS_TARGET} MXE_PLUGIN_DIRS=plugins/gcc9 cc --jobs=4 JOBS=2
     if ((`date +%s`-START_TIME < 1200)); then
       make MXE_TARGETS=${CROSS_TARGET} MXE_PLUGIN_DIRS=plugins/gcc9 intel-tbb boost eigen --jobs=4 JOBS=2
     fi
     kill $WATCHDOG_PID
     export PATH=${PWD}/usr/bin:$PATH
     popd
   fi
 - |
   if [[ ${BUILD_TYPE} == DOC ]]; then
      echo "Doc prepare."
   fi
 - cd ${c_path}

script:
 - export FINISH_TIME=`date +%s`
 - |
   if ((FINISH_TIME-START_TIME < 2400)); then
     if [[ ${BUILD_TYPE} == PROGRAM ]] || [[ ${BUILD_TYPE} == CROSS ]]; then
        mkdir ${c_path}/build && cd ${c_path}/build
        ${CMAKE_COMMAND} ../ -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_BUILD_TYPE=Release -DBUILD_DOC=OFF `echo ${SUPERCELL_CMAKE_OPTIONS}`
        make -j 2 supercell
     fi
   else
     echo "Too much time spended. Trying to save cache."
     false
   fi
 - |
   if [[ ${BUILD_TYPE} == DOC ]]; then
      mkdir ${c_path}/build && cd ${c_path}/build
      ${CMAKE_COMMAND} ../ -DBUILD_PROGRAM=OFF -DBUILD_DOC=ON
      make -j 2
   fi
 - cd ${c_path}/build
 - if [[ ${BUILD_TYPE} == PROGRAM ]]; then ./src/sc_cli/supercell `echo ${TEST_PROGRAM_CMD}`; fi
 - if [[ ${BUILD_TYPE} == CROSS ]]; then wine ./src/sc_cli/supercell.exe `echo ${TEST_PROGRAM_CMD}`; fi
 - |
   if [[ ${BUILD_TYPE} == DOC ]]; then
      ls doc/man/supercell_man.{html,pdf} doc/man/supercell.1 doc/tutorial/supercell_tutorial.pdf
   fi

before_deploy:
  - wget https://github.com/orex/supercell/raw/deploy/deploy.sh -O ${c_path}/deploy.sh && chmod +x ${c_path}/deploy.sh

deploy:
  provider: script
  script: ${c_path}/deploy.sh
  skip_cleanup: true
  on:
    all_branches: true
    condition: ${DEPLOY_BUILD} != FALSE && ${DEPLOY_BUILD} != ""
